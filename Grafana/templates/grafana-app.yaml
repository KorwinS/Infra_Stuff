AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template Grafana: Grafana + influxdatasource + user signup + autoscale group + load balancer + dns
Parameters:
  PolicyTargetValue:
    Type: String
    Description: Target value of autoscale metric
  SMTPUser:
    Description: SES SMTP Username
    Type: String
  SMTPPass:
    Description: SES SMTP Password
    Type: String
    NoEcho: 'True'
  NotificationEmail:
    Description: Email Notification for SNS topics
    Type: String
  MaxInstances:
    Description: Maximum number of EC2 instances in Autoscale Group
    Type: String
    Default: '1'
  MinInstances:
    Description: Minimum number of EC2 instances in Autoscale Group 
    Type: String
    Default: '1'
  MCStackName:
    Description: Stack Name for the memcache stack that Grafana will use. Optionally, this can be used as your stage name when you start your hip hop career.
    Type: String
  DBStackName:
    Description: Stack Name for the RDS stack that grafana will be using. 
    Type: String
  GoogleAnalyticsID:
    Description: Google Analytics Tracking ID for grafana
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Can contain only ASCII characters.
  SSLCertificate:
    Type: String
    Description: Enter the SSL Certificate to install on the load balancer
  TelegrafURL:
    Description: Telegraf Installation Package URL (RPM)
    Type: String
    Default: 'https://dl.influxdata.com/telegraf/releases/telegraf-1.3.2-1.x86_64.rpm'
  DomainName:
    Description: Domain name to use with Route53
    Type: String
  TelegrafDBUser:
    Description: Username for Telegraf Output Plugin
    Type: String
  TelegrafDBPass:
    Description: Password for Telegraf Output Plugin
    Type: String
    NoEcho: 'True'
  DBUser:
    Description: Username for the RDS Database to use with Grafana
    Type: String
    Default: 'grafanadb'
  DBName:
    Description: Name of the RDS Database to use with Grafana
    Type: String
    Default: 'grafanadb'
  DBPassword:
    Description: Password of the RDS Database to use with Grafana
    Type: String
    NoEcho: 'true'
  GFAdminPassword:
    Description: Password for Grafana Admin
    Type: String
    NoEcho: 'true'
  Owner:
    Description: Owner Tag
    Type: String
  GrafanaURL:
    Description: Grafana Installation Package URL (RPM)
    Type: String
    Default: 'https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-4.6.3-1.x86_64.rpm' 
  InstanceType:
    Description: Grafana Server EC2 instance type
    Type: String
    Default: m4.large
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  DesktopIPs:
    Description: The IP address range of our desktops
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  DatacenterIPs:
    Description: The IP address range of our datacenters
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  AWSInstanceType2Arch:
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-f0ea638a
      HVM64: ami-55ef662f
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-15e9c770
    us-west-2:
      PV64: ami-da4694a2
      HVM64: ami-bf4193c7
    us-west-1:
      PV64: ami-3b1e265b
      HVM64: ami-a51f27c5
Resources:
  GrafanaServerInstance:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Logs
            - Install
            - Configure
        Install:
          packages:
            yum:
              nginx: []
          commands:
            01_install_grafana:
              command: !Sub | 
                yum install -y ${GrafanaURL}
            02_install_telegraf:
              command: !Sub |
                yum install -y ${TelegrafURL}    
          files:
            /etc/nginx/nginx.conf:
              content: !Sub | 
                user nginx;
                worker_processes 4;
                error_log /var/log/nginx/error.log;
                pid /var/run/nginx.pid;
                include /usr/share/nginx/modules/*.conf;
                events {
                    worker_connections 8096;
                    multi_accept on;
                    use epoll;
                }
                http {
                    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                      '$status $body_bytes_sent "$http_referer" '
                                      '"$http_user_agent" "$http_x_forwarded_for"';
                    access_log  /var/log/nginx/access.log  main;
                    include /etc/nginx/default.d/*.conf;
                    sendfile            on;
                    tcp_nopush          on;
                    tcp_nodelay         on;
                    keepalive_timeout   15;
                    types_hash_max_size 2048;
                    include             /etc/nginx/mime.types;
                    default_type        application/octet-stream;
                                include /etc/nginx/conf.d/*.conf;
                    index   index.html index.htm;
                    server {
                        listen       80 default_server;
                        server_name  localhost;
                        root         /usr/share/nginx/html;
                        location / {
                          proxy_set_header   X-Real-IP $remote_addr;
                          proxy_set_header   Host      $http_host;
                          proxy_http_version 1.1;
                          proxy_set_header Connection "";
                          proxy_pass http://localhost:3000;
                          if ($http_x_forwarded_proto != "https") {
                            rewrite ^(.*)$ https://$host$REQUEST_URI permanent;
                          }
                        }
                        location /metrics {
                          proxy_pass http://localhost:3000/metrics;
                        }
                        error_page 404 /404.html;
                            location = /40x.html {
                        }
                        error_page 500 502 503 504 /50x.html;
                            location = /50x.html {
                        }
                        location /nginx_status {
                        stub_status on;
                        access_log   off;
                        allow 127.0.0.1;
                        deny all;
                      }
                    }
                }
              mode: '000644'
              owner: root
              group: root
            /etc/telegraf/telegraf.conf:
              content: 
                !Sub 
                  - | 
                    [global_tags]
                    environment = "Prod"
                    servertype = "grafana"
                    [agent]
                    interval = "10s"
                    round_interval = true
                    metric_batch_size = 1000
                    metric_buffer_limit = 10000
                    collection_jitter = "0s"
                    flush_interval = "10s"
                    flush_jitter = "0s"
                    precision = ""
                    debug = false
                    quiet = false
                    logfile = ""
                    omit_hostname = false
                    [[outputs.influxdb]]
                    urls = ["${TelegrafOutputURL}"]
                    database = "${TelegrafOutputDB}"
                    retention_policy = ""
                    write_consistency = "any"
                    timeout = "5s"
                    username = "${TelegrafDBUser}"
                    password = "${TelegrafDBPass}"
                    [[inputs.socket_listener]]
                    service_address = "tcp://:9090"
                    # max_connections = 1024
                    # read_timeout = "30s"
                    # read_buffer_size = 65535
                    # keep_alive_period = "5m"
                    data_format = "graphite"
                    [[inputs.cpu]]
                    percpu = true
                    totalcpu = true
                    collect_cpu_time = false
                    [[inputs.disk]]
                    ignore_fs = ["tmpfs", "devtmpfs", "devfs"]
                    [[inputs.diskio]]
                    [[inputs.kernel]]
                    [[inputs.mem]]
                    [[inputs.processes]]
                    [[inputs.swap]]
                    [[inputs.system]]
                    [[inputs.net]]
                    [[inputs.prometheus]]
                    urls = ["http://localhost/metrics"]
                    [[inputs.nginx]]
                    urls = ["http://localhost/nginx_status"]
                  -
                    TelegrafOutputURL: !ImportValue InfluxDB-URL
                    TelegrafOutputDB: !ImportValue InfluxDB-Database
                    TelegrafDBUser: !Ref TelegrafDBUser
                    TelegrafDBPass: !Ref TelegrafDBPass
              mode: '000644'
              owner: root
            /etc/grafana/grafana.ini:
              content: 
                !Sub 
                  - | 
                    [server]
                    enable_gzip = true
                    domain = ${DomainName}.qlmetrics.com
                    root_url = https://%(domain)s:443/
                    [security]
                    admin_password = ${GFAdminPassword}
                    [database]
                    host = ${RDSHostName}
                    type = postgres
                    name = ${DBName}
                    user = ${DBUser}
                    password = ${DBPassword}
                    ssl_mode = require
                    [users]
                    allow_sign_up = true
                    auto_assign_org_role = Editor
                    [session]
                    provider = memcache
                    provider_config = ${Memcache}
                    cookie_secure = true
                    [smtp]
                    enabled = true
                    host = email-smtp.us-east-1.amazonaws.com:25
                    user = ${SMTPUser}
                    password = ${SMTPPass}
                    from_address = from@example.com
                    from_name = "Grafana Alert"
                    [emails]
                    welcome_email_on_sign_up = true
                    [alerting]
                    enabled = true
                    [analytics]
                    google_analytics_ua_id = ${GoogleAnalyticsID}
                    [metrics]
                    enabled = true
                    interval_seconds = 10
                  -
                    RDSHostName:
                      'Fn::ImportValue': 
                        !Sub ${DBStackName}-dbconnection
                    Memcache:
                      'Fn::ImportValue': 
                        !Sub ${MCStackName}-Memcache
                    SMTPUser: !Ref SMTPUser
                    SMTPPass: !Ref SMTPPass
              mode: '000644'
              owner: root
            /etc/cfn/cfn-hup.conf:
              content: 
                !Sub 
                  - | 
                    [main]
                    stack=${StackId} 
                    region=${Region}
                  -
                    StackId: !Ref 'AWS::StackId'
                    Region: !Ref 'AWS::Region'
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/grafanahook.conf:
              content: !Sub |
                  [grafanapluginhook]
                  triggers=post.add, post.update, post.remove
                  path=Resources.GrafanaServerInstance.Metadata.AWS::CloudFormation::Init.Configure
                  action=service grafana-server restart
                  runas=root

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.GrafanaServerInstance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource GrafanaServerInstance '
                  - '         --configsets InstallAndRun '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
          services:
            sysvinit:
              grafana-server:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/grafana/grafana.ini
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/nginx/nginx.conf
              telegraf:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/telegraf/telegraf.conf
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Configure:
          commands:
            00_install_influxadmin:
              command: grafana-cli plugins install natel-influx-admin-panel
            01_install_grafanaclock:
              command: grafana-cli plugins install grafana-clock-panel
            02_install_piechart:
              command: grafana-cli plugins install grafana-piechart-panel
            03_install_azure:
              command: grafana-cli plugins install grafana-azure-monitor-datasource
            04_install_bubblechart:
              command: grafana-cli plugins install digrich-bubblechart-panel
            05_install_carpetplot:
              command: grafana-cli plugins install petrslavotinek-carpetplot-panel
            06_install_zabbix_app:
              command: grafana-cli plugins install alexanderzobnin-zabbix-app
            98_restart_grafana: 
              command: service grafana-server restart
            99_temp:
              command: echo 1
        Logs:
            packages:
              yum:
                awslogs: []
            commands:
              01_make_awslogs_dir:
                command: mkdir /var/awslogs
            files:
              /etc/awslogs/awslogs.conf:
                content: !Sub |
                  [general]
                  state_file = /var/awslogs/agent-state
                  [grafanalogs]
                  file = /var/log/grafana/grafana.log
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/grafana.log
                  datetime_format = %Y-%m-%dT%H:%M:%S
                  [cronlogs]
                  file = /var/log/cron
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/cron.log
                  datetime_format = %b %d %H:%M:%S
                  [optcronlogs]
                  file = /opt/grafana/optcron.log
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/cron.log
                  datetime_format = %b %d %H:%M:%S
                  [telegraf.log]
                  file = /var/log/telegraf/telegraf.log
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/telegraf.log
                  datetime_format = %Y-%m-%dT%H:%M:%S
                  [nginx-error.log]
                  file = /var/log/nginx/error.log
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/nginx-error.log
                  datetime_format = %Y-%m-%dT%H:%M:%S
                  [nginx-access.log]
                  file = /var/log/nginx/access.log
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/nginx-access.log
                  datetime_format = %d/%m/%Y:%H:%M:%S+
                  [messages]
                  file = /var/log/messages
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/messages
                  datetime_format = %b %d %H:%M:%S
                  [cloud-init.log]
                  file = /var/log/cloud-init.log
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/cloud-init.log
                  datetime_format = %b %d %H:%M:%S
                  [cloud-init-output.log]
                  file = /var/log/cloud-init-output.log
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/cloud-init-output.log
                  datetime_format = %b %d $Y %H:%M:%S %Z
                  [cfn-init.log]
                  file = /var/log/cfn-init.log
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/cfn-init.log
                  datetime_format = %Y-%m-%d %H:%M:%S
                  [cfn-init-cmd.log]
                  file = /var/log/cfn-init-cmd.log
                  log_group_name = ${GrafanaLogGroup}
                  log_stream_name = {instance_id}/cfn-init-cmd.log
                  datetime_format = %Y-%m-%d %H:%M:%S
                mode: '000400'
                owner: root
                group: root
            services:
              sysvinit:
                awslogs:
                  enabled: 'true'
                  ensureRunning: 'true'
                  files:
                    - /etc/awslogs/awslogs.conf
    Properties:
      IamInstanceProfile: !Ref GrafanaRoleProfile
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref GrafanaCFNSecurityGroup
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum install -y aws-cfn-bootstrap
            - |
              mkdir /opt/grafana
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource GrafanaServerInstance '
            - '         --configsets InstallAndRun '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource GrafanaAutoscaleGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
            - |

  GrafanaCFNSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !ImportValue myVpcId-Metrics
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref DatacenterIPs
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref DatacenterIPs
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref DesktopIPs
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref DesktopIPs
  GrafanaRoleS3: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies: 
        - 
          PolicyName: "Grafana_CW_RM_Readonly"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: "arn:aws:iam::897041511909:role/ql-role-monitordev-cw_readonly"
  S3Policy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "s3:*"
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'cloudformation:SignalResource'
            Resource: "*"
      Roles: 
        - 
          Ref: "GrafanaRoleS3"
  GrafanaRoleProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - 
          Ref: "GrafanaRoleS3"
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !ImportValue myVpcId-Metrics
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref DatacenterIPs
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref DesktopIPs
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref DatacenterIPs
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref DesktopIPs
  ALBSSLListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificate
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c8d3d061-abe7-4789-9c3c-7362460725ae
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets: 
        - !ImportValue 'myEc2PublicSubnet1-Metrics'
        - !ImportValue 'myEc2PublicSubnet2-Metrics'
      SecurityGroups:
        - !Ref ALBSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3173ace7-f59d-468e-9202-cd1b1f9d11f4
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 6
      HealthCheckPath: /api/health
      Matcher:
        HttpCode: '301'
      Name: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue myVpcId-Metrics
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a2ca5b26-e320-4554-83f3-d119b78f84eb
  GrafanaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  GrafanaSNS:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref NotificationEmail
        Protocol: email
  ScalePolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref GrafanaAutoscaleGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref PolicyTargetValue
  GrafanaAvgCPUUtilization:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: True
      AlarmActions:
        - !Ref GrafanaSNS
      AlarmDescription: Grafana Average CPU Utilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: GrafanaServerInstance
          Value: !Ref GrafanaServerInstance
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      OKActions:
        - !Ref GrafanaSNS
      Period: 300
      Statistic: Average
      Threshold: 60
  ALB500:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: True
      AlarmActions:
        - !Ref GrafanaSNS
      AlarmDescription: ALB 500 errors
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApplicationLoadBalancer
          Value: !Ref ApplicationLoadBalancer
      EvaluationPeriods: 1
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      OKActions:
        - !Ref GrafanaSNS
      Period: 60
      Statistic: Sum
      Threshold: 2
      Unit: Count
      TreatMissingData: notBreaching
  GrafanaAutoscaleGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: 
        - !ImportValue 'myEc2PrivateSubnet1-Metrics'
        - !ImportValue 'myEc2PrivateSubnet2-Metrics'
      HealthCheckType: ELB
      HealthCheckGracePeriod: '180'
      LaunchConfigurationName: !Ref GrafanaServerInstance
      MetricsCollection:
        - Granularity: 1Minute
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - Grafana-ASG
          PropagateAtLaunch: 'True'
        - Key: Owner
          Value: !Ref Owner
          PropagateAtLaunch: 'True'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      NotificationConfigurations:
        - TopicARN:
            Ref: GrafanaSNS
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '2'
        PauseTime: PT5M
        WaitOnResourceSignals: 'true'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7569b91a-6b16-48f3-ae62-d1b5f8616394
  GrafanaDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: qlmetrics.com.
      Comment: Adding Loadbalancer Alias for Grafana
      RecordSets: 
      - Name: !Sub
        - ${DomainName}.qlmetrics.com.
        - { DomainName: !Ref DomainName }
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt ApplicationLoadBalancer.DNSName
Outputs:
  GrafanaURL:
    Description: URL for Grafana
    Value: !Sub "${DomainName}.qlmetrics.com"
    Export:
      Name: !Sub "${AWS::StackName}-GrafanaURL"
  LoadBalancerEndpoint:
    Description: URL for the Load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerEndpoint"


          
